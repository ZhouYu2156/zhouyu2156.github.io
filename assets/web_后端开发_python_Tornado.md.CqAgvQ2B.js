import{_ as a,c as i,o as n,aF as l}from"./chunks/framework.DEmh6Vhl.js";const c=JSON.parse('{"title":"Tornado 框架","description":"","frontmatter":{},"headers":[],"relativePath":"web/后端开发/python/Tornado.md","filePath":"web/后端开发/python/Tornado.md","lastUpdated":1744689573000}'),e={name:"web/后端开发/python/Tornado.md"};function p(t,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="tornado-框架" tabindex="-1">Tornado 框架 <a class="header-anchor" href="#tornado-框架" aria-label="Permalink to &quot;Tornado 框架&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">介绍</p><p>Tornado 是一个Python Web框架和异步网络库，起初由FriendFeed开发。通过使用非阻塞网络I/O，Tornado可以支撑上万级的连接，处理长连接、WebSockets和其他需要与每个用户保持长久连接的应用。</p><ul><li>推荐1: <a href="https://www.tornadoweb.org/en/stable/index.html" target="_blank" rel="noreferrer">英文官网</a></li><li>推荐2: <a href="https://tornado-zh.readthedocs.io/zh/latest/" target="_blank" rel="noreferrer">中文文档</a></li></ul></div><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">说明</p><p>Tornado是使用Python编写的一个强大的、可扩展的Web服务器。它在处理庞大的网络流量时表现得足够强健，同时在创建和编写时有着足够的轻量级，并能够被用在大量的应用和工具中。</p><p>Tornado起初是由FriendFeed开发的网络服务框架，当FriendFeed被Facebook收购后得以开源。Tornado在设计之初就考虑到了性能因素，旨在解决C10K问题，这样的设计使得其成为一个拥有高性能的框架。此外，它还具有处理安全性、用户验证、社交网络以及与外部服务（如数据库和网站API）进行异步交互的特性。</p><blockquote><p>C10K问题指的是优化网络套接字来处理客户端的请求时产生的问题。之所以被称为 C10K，是为了描述并发地处理 10k 数量级的连接数。</p></blockquote></div><p>Tornado 大体上可以被分为 4 个主要部分：</p><ul><li>Web框架，包括创建Web应用的RequestHandler类，还有很多其他支持的类。</li><li>HTTP (HTTPServer 和 AsyncHTTPClient) 的客户端和服务端实现。</li><li>异步网络库 (IOLoop 和 IOStream)， 为 HTTP 组件提供构建模块，也可以用来实现其他协议。</li><li>协程库 (tornado.gen)，允许以比链式回调更直接的方式编写异步代码。</li></ul><h2 id="安装-tornado" tabindex="-1">安装 Tornado <a class="header-anchor" href="#安装-tornado" aria-label="Permalink to &quot;安装 Tornado&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这里演示的 tornado 使用的版本是: <code>5.0.2</code></p></div><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="复制" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tornado==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0.2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="第一个-tornado-程序" tabindex="-1">第一个 Tornado 程序 <a class="header-anchor" href="#第一个-tornado-程序" aria-label="Permalink to &quot;第一个 Tornado 程序&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="复制" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tornado </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ioloop, web</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 请求处理器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建应用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> web.Application([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MainHandler),    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置路由 和 路由对应的处理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make_app()    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取 web 应用实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绑定监听端口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server is running at http://localhost:8888/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ioloop.IOLoop.current().start()     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开始事件循环: 启动服务</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="http-方法" tabindex="-1">HTTP 方法 <a class="header-anchor" href="#http-方法" aria-label="Permalink to &quot;HTTP 方法&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">介绍</p><p>Tornado 框架提供了常见的 HTTP 方法，封装在 RequestHandler 类当中，当我们在编写对应处理器时，就可以重写这些方法来响应不同的请求。只要匹配对应的路由进入对应的处理器，处理器内部会自动根据请求方式分发给对应的请求函数去响应。</p></div><p>Tornado 提供的 HTTP 方法如下：</p><ul><li><code>RequestHandler.options(*args, **kwargs)</code></li><li><code>RequestHandler.head(*args, **kwargs)</code></li><li><code>RequestHandler.get(*args, **kwargs)</code></li><li><code>RequestHandler.post(*args, **kwargs)</code></li><li><code>RequestHandler.delete(*args, **kwargs)</code></li><li><code>RequestHandler.put(*args, **kwargs)</code></li><li><code>RequestHandler.patch(*args, **kwargs)</code></li></ul><blockquote><p>示例</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="复制" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tornado </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ioloop, web</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 处理不同的请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # GET 请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is login page!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # POST 请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.write(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> web.Application([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MainHandler),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LoginHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make_app()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server running at http://localhost:8888/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ioloop.IOLoop.current().start()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 浏览器直接访问, 走 GET 请求: http://127.0.0.1:8888/login</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cmd 中通过这个命令也可以发起一个POST请求：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#        curl -d &quot;username=mrsoft&amp;password=123456&quot; http://127.0.0.1:8888/login</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="模板、静态资源" tabindex="-1">模板、静态资源 <a class="header-anchor" href="#模板、静态资源" aria-label="Permalink to &quot;模板、静态资源&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">说明</p><p>Flask 和 Django框架有模板，Tornado自身也提供了一个轻量级、快速切灵活地模板语言在 tornado.template 模块中。使用模板可以简化 web 页面，并且提高代码的可读性。</p></div><ul><li>在 <code>Application</code> 中可以设置如下参数: <ul><li><code>handlers=[(r&#39;/&#39;, SomeHandler), ...]</code>, 设置路由和对应的处理器</li><li><code>debug=True</code>, 开启调试模式</li><li><code>template_path=&quot;xxx&quot;</code>, 设置模板路径</li><li><code>static_path=&quot;xxx&quot;</code>, 设置静态资源路径</li></ul></li></ul><blockquote><p>设置了模板路径之后，就可以通过 <code>self.render(&#39;xxx.html&#39;)</code> 方法来渲染模板了，返回的 <code>xxx.html</code> 就是 <code>template目录</code> 下的模板文件。</p></blockquote><blockquote><p>设置了静态资源路径之后，就可以在模板文件中通过 <code>&lt;script src=&quot;{\\{ static_url(&#39;index.js&#39;) \\}}&quot;&gt;&lt;/script&gt;</code> 这样的语法来引用 <code>static目录</code> 下的静态资源了，最终页面返回给前端渲染出来的路径是 <code>/static/index.js</code> 。(上面的 <code>\\</code> 用来转义 vue 语法，不然被默认为双花括号为插值语法了)</p></blockquote><h3 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">介绍</p><p>Tornado的模板语法和 <code>flask</code> 的 <code>jinja2</code> 模板语法相似，拥有控制语句和表达式。</p><ul><li><p>控制语句被包在 <code>{%</code> 和 <code>%}</code> 中间, 例如 <code>{% if len(items) &gt; 2 %} {% endif %}</code>, 其中 <code>items</code> 通过 <code>RequestHandler</code> 的处理方法中的 <code>self.render(&#39;xx.html&#39;, items=[])</code> 这种方式传递给模板。</p></li><li><p>表达式被包在 <code>{\\{ 和 \\}}</code> 之间, 例如 <code>{\\{ items[0] \\}}</code></p></li><li><p>模板中可以使用的内置对象</p></li></ul><p>详情参见: <a href="https://tornado-zh.readthedocs.io/zh/latest/guide/templates.html#" target="_blank" rel="noreferrer">戳我看官方说明</a></p></div><h2 id="异步与协程" tabindex="-1">异步与协程 <a class="header-anchor" href="#异步与协程" aria-label="Permalink to &quot;异步与协程&quot;">​</a></h2><h3 id="阻塞" tabindex="-1">阻塞 <a class="header-anchor" href="#阻塞" aria-label="Permalink to &quot;阻塞&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">概念</p><p>程序未得到所需计算资源时被挂起的状态称之为阻塞。</p><p>程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的。常见的阻塞形式有网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。</p><p>阻塞是无处不在的，包括CPU切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。</p></div><h3 id="非阻塞" tabindex="-1">非阻塞 <a class="header-anchor" href="#非阻塞" aria-label="Permalink to &quot;非阻塞&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">概念</p><p>程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的。</p><p>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。非阻塞的存在是因为阻塞的存在，正因为某个操作阻塞导致的耗时和效率低下，我们才要把它变成非阻塞的。</p></div>`,29)]))}const E=a(e,[["render",p]]);export{c as __pageData,E as default};
